HTTP request
************

.[perex]
Nette zapouzdřuje HTTP požadavek do objektů se srozumitelným API a zároveň poskytuje sanitizační filtr.

Instalace:

```shell
composer require nette/http
```

Nette Framework pročistí data odeslané uživatelem od kontrolních a neplatných znaků. Zároveň odstraní případné *magic_quotes*.

URL požadavku získáme jako objekt [api:Nette\Http\UrlScript]:

```php
$uri = $httpRequest->getUrl();
echo $uri; // např. https://doc.nette.org/cs/?action=edit
echo $uri->host; // nette.org
```

Zjištění HTTP metody, se kterou se na stránku přistoupilo:

```php
echo $httpRequest->getMethod(); // GET, POST, HEAD, PUT

if ($httpRequest->isMethod('GET')) ...
```

Je spojení šifrované (HTTPS)?

```php
echo $httpRequest->isSecured() ? 'ano' : 'ne';
```

Jde o AJAXový požadavek?

```php
echo $httpRequest->isAjax() ? 'ano' : 'ne';
```

Jaká je IP adresa uživatele?

```php
echo $httpRequest->getRemoteAddress(); // IP adresa uživatele
echo $httpRequest->getRemoteHost(); // a její DNS překlad
```

Z jaké URL uživatel přišel? Vrací se jako objekt [Nette\Http\Url |urls]

```php
echo $httpRequest->getReferer()->host;
```

Parametry požadavku:

```php
$get = $httpRequest->getQuery(); // vrací pole všech parametrů z URL
$id = $httpRequest->getQuery('id'); // vrací GET parametr 'id' (nebo NULL)

$post = $httpRequest->getPost(); // vrací pole všech parametrů z POST
$id = $httpRequest->getPost('id'); // vrací POST parametr 'id' (nebo NULL)

$cookies = $httpRequest->getCookies(); // vrací všechny cookies
$sessId = $httpRequest->getCookie('sess_id'); // vrací cookie (nebo NULL)
```

Uploadované soubory jsou zapouzdřeny do objektů [api:Nette\Http\FileUpload]:

```php
$files = $httpRequest->getFiles(); // vrací pole všech uploadů

$file = $httpRequest->getFile('avatar'); // vrací jeden soubor
echo $file->getName(); // jméno souboru odeslané uživatelem
echo $file->getSanitizedName(); // jméno bez nebezpečných znaků
```

HTTP hlavičky zjistíme:

```php
// vrací asociativní pole HTTP hlaviček
$headers = $httpRequest->getHeaders();

// vrací konkrétní hlavičku (case-insensitive)
$userAgent = $httpRequest->getHeader('User-Agent');
```

Užitečná je metoda `detectLanguage()`, které předáme pole s jazyky, které aplikace podporuje, a ona vrátí ten, který by viděl návštěvníkův prohlížeč nejraději. Nejsou to žádná kouzla, jen se využívá hlavičky `Accept-Language`.

```php
// prohlížeč odesílá např. Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = array('hu', 'pl', 'en'); // jazyky podporované aplikací

echo $httpRequest->detectLanguage($langs); // en
```

Tělo HTTP požadavku:

```php
// ve výchozím stavu ekvivalent k: file_get_contents('php://input');
$body = $httpRequest->getRawBody();
```


RequestFactory a filtrování URL
-------------------------------

Objekt s aktuálním HTTP požadavkem vyrábí [api:Nette\Http\RequestFactory]. Její chování můžeme pozměnit. Pomocí tzv. filtrů lze URL vyčistit od znaků, které se do nich mohou dostat kvůli špatně implementovaným komentářovým systémům na různých cizích webech:

```php
$requestFactory = new Nette\Http\RequestFactory;

// odstraníme mezery z cesty
$requestFactory->urlFilters['path']['%20'] = '';

// odstraníme tečku, čárku nebo pravou závorku z konce URI
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// vyčistíme cestu od zdvojených lomítek (výchozí filtr)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```

A poté si necháme vygenerovat nový `httpRequest` a uložíme jej do systémového kontejneru:

```php
// $container je systémový kontejner
$container->addService('httpRequest', $requestFactory->createHttpRequest());
```

{{composer: nette/http}}
