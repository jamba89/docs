HTTP Request
************

.[perex]
Nette encapsulates the HTTP request into objects with an understandable API while providing a sanitization filter.

Installation:

```shell
composer require nette/http
```

Nette Framework cleans out data sent by a user from control and invalid characters. It also removes any //magic_quotes//.

The URL of the request is available as [api:Nette\Http\UrlScript] instance:

```php
$url = $httpRequest->getUrl();
echo $url;       // e.g. https://nette.org/en/documentation?action=edit
echo $url->host; // nette.org
```

Determine current HTTP method:

```php
echo $httpRequest->getMethod(); // GET, POST, HEAD, PUT

if ($httpRequest->isMethod('GET')) ...
```

Is the connection encrypted (HTTPS)?

```php
echo $httpRequest->isSecured() ? 'yes' : 'no';
```

Is this an AJAX request?

```php
echo $httpRequest->isAjax() ? 'yes' : 'no';
```

What is the user's IP address?

```php
echo $httpRequest->getRemoteAddress(); // user's IP address
echo $httpRequest->getRemoteHost();    // and its DNS translation
```

What URL the user came from? Returned as [Nette\Http\Url |urls] object.

```php
echo $httpRequest->getReferer()->host;
```

Request parameters:

```php
$get = $httpRequest->getQuery();    // array of all URL parameters
$id = $httpRequest->getQuery('id'); // returns GET parameter 'id' (or NULL)

$post = $httpRequest->getPost();    // array of all POST parameters
$id = $httpRequest->getPost('id');  // returns POST parameter 'id' (or NULL)

$cookies = $httpRequest->getCookies(); // array of all cookies
$sessId = $httpRequest->getCookie('sess_id'); // returns the cookie (or NULL)
```

Uploaded files are encapsulated into [api:Nette\Http\FileUpload] objects:

```php
$files = $httpRequest->getFiles(); // array of all uploaded files

$file = $httpRequest->getFile('avatar'); // returns one file
echo $file->getName(); // name of the file sent by user
echo $file->getSanitizedName(); // the name without dangerous characters
```

HTTP headers are also accessible:

```php
// returns associative array of HTTP headers
$headers = $httpRequest->getHeaders();

// returns concrete header (case-insensitive)
$userAgent = $httpRequest->getHeader('User-Agent');
```

A useful method is `detectLanguage()`. You can pass it an array with languages supported by application and it returns the one preferred by browser. It is not magic, the method just uses the `Accept-Language` header.

```php
// Header sent by browser: Accept-Language: cs,en-us;q=0.8,en;q=0.5,sl;q=0.3

$langs = array('hu', 'pl', 'en'); // languages supported in application

echo $httpRequest->detectLanguage($langs); // en
```

Raw request body:

```php
// By default equivalent to: file_get_contents('php://input');
$body = $httpRequest->getRawBody();
```


RequestFactory and URL Filtering
--------------------------------

Object holding current HTTP request is created by [api:Nette\Http\RequstFactory]. Its behavior can be modified. It's possible to clean up URLs from characters that can get into them because of poorly implemented comment systems on various other websites by using filters:

```php
$requestFactory = new Nette\Http\RequestFactory;

// remove spaces from path
$requestFactory->urlFilters['path']['%20'] = '';

// remove dot, comma or right parenthesis form the end of the URL
$requestFactory->urlFilters['url']['[.,)]$'] = '';

// clean the path from duplicated slashes (default filter)
$requestFactory->urlFilters['path']['/{2,}'] = '/';
```

And then we let the factory generate a new `httpRequest` and we store it in a system container:

```php
// $container is a system container
$container->addService('httpRequest', $requestFactory->createHttpRequest());
```

{{composer: nette/http}}
